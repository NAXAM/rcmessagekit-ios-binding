// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Threading.Tasks;
using Foundation;
using RCMessageKit;
using RCMessageKitQs.Models;
using UIKit;

namespace RCMessageKitQs.Views
{
    public partial class ChatView : RCMessagesView
    {
        UIImagePickerController imagePicker;

        NSMutableDictionary rcmessages;
        NSMutableDictionary avatarImages;
        NSMutableArray avatarIds;

        long lastRead;

        Task DownloadTask { get; set; }

        public ChatView(IntPtr handle) : base(handle)
        {
            TableView = new UITableView()
            {
                DataSource = this,
                Delegate = this
            };
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            this.NavigationController.NavigationBar.Translucent = false;
            this.NavigationController.NavigationBar.BarTintColor = UIColor.FromRGB(126, 187, 0);
            this.NavigationController.NavigationBar.TintColor = UIColor.White;
            this.NavigationController.NavigationBar.BarStyle = UIBarStyle.Black;

            imagePicker = new UIImagePickerController();
            imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
            imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);
            imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
            imagePicker.Canceled += Handle_Canceled;

            LabelTitle1 = new UILabel();
            LabelTitle1.Text = "asdasdasdasdas";

            lastRead = DateTime.Now.Ticks;

            rcmessages = new NSMutableDictionary();
            avatarImages = new NSMutableDictionary();
            avatarIds = new NSMutableArray();

            DownloadTask = Task.Factory.StartNew(() => { });

            View.AddSubview(TableView);

            myTextField.EditingChanged += (sender, e) => {
                btnRCMessageSend.Enabled = !myTextField.Text.Equals("");
            };

            TableView.ReloadData();
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            TableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;
            TableView.Frame = new CoreGraphics.CGRect(0, 0, UIScreen.MainScreen.Bounds.Width, UIScreen.MainScreen.Bounds.Height - 64 - 44);
        }

        #region Table view data source

        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            return AppDelegate.dbmessages.Count;
        }

        #endregion Table view data source   

        #region DBMessage methods

        nint MyIndex(NSIndexPath indexPath)
        {
            return indexPath.Section;
        }

        DBMessage MyDBMessage(NSIndexPath indexPath)
        {
            nint index = MyIndex(indexPath);
            return AppDelegate.dbmessages[(int)index];
        }

        DBMessage DBMessageAbove(NSIndexPath indexPath)
        {
            if (indexPath.Section > 0)
            {
                NSIndexPath indexAbove = NSIndexPath.FromRowSection(0, indexPath.Section - 1);
                return MyDBMessage(indexAbove);
            }
            return null;
        }

        #endregion DBMessage methods

        #region Message methods

        public override RCMessage Rcmessage(NSIndexPath indexPath)
        {
            DBMessage dbmessage = MyDBMessage(indexPath);

            string messageId = dbmessage.objectId;
            System.Diagnostics.Debug.WriteLine($"{indexPath.Section}: {messageId}");
            if (rcmessages[messageId] == null)
            {
                RCMessage rcmessage = new RCMessage();

                bool incoming = dbmessage.senderId.Equals("Naxam");

                if (dbmessage.type.Equals("text"))
                {
                    rcmessage = new RCMessage(dbmessage.text, incoming);
                }

                if (dbmessage.type.Equals("picture"))
                {
                    NSUrl myUrl = new NSUrl(dbmessage.picture);

                    rcmessage = new RCMessage(null, dbmessage.picture_width, dbmessage.picture_height, incoming);
                    rcmessage.Status = (int)MessageStatus.Succeed;

                    NSUrlSession.SharedSession.CreateDataTaskAsync(myUrl)
                                .ContinueWith(t =>
                                {
                                    if (t.IsFaulted)
                                    {
                                        return;
                                    }

                                    rcmessage.Picture_image = UIImage.LoadFromData(t.Result.Data);
                                });

                }

                if (dbmessage.type.Equals("video"))
                {
                    rcmessage = new RCMessage(dbmessage.video_path, dbmessage.video_duration, incoming);
                    rcmessage.Video_thumbnail = dbmessage.video_image;
                    rcmessage.Status = (int)MessageStatus.Succeed;
                }

                if (dbmessage.type.Equals("location"))
                {
                    rcmessage = new RCMessage(dbmessage.latitude, dbmessage.longitude, incoming, HandleAction);
                }

                rcmessages[messageId] = rcmessage;
            }

            return (RCMessage)rcmessages[messageId];
        }

        void HandleAction()
        {
            Console.WriteLine("Naxam naxam naxm naxam naxam");
        }

        #endregion Message methods

        #region Avatar methods

        public override string AvatarInitials(NSIndexPath indexPath)
        {
            DBMessage dbmessage = MyDBMessage(indexPath);
            return dbmessage.senderInitials;
        }

        public override UIImage AvatarImage(NSIndexPath indexPath)
        {
            DBMessage dbmessage = MyDBMessage(indexPath);

            UIImage imgAvatar = new UIImage();

            if (avatarImages[dbmessage.senderId] == null)
            {
                imgAvatar = UIImage.FromFile(dbmessage.senderPicture);
            }

            return imgAvatar;
        }

        #endregion Avatar methods

        #region Header, Footer methods

        public override string TextSectionHeader(NSIndexPath indexPath)
        {
            if (indexPath.Section % 3 == 0)
            {
                DBMessage dbmessage = MyDBMessage(indexPath);
                DateTime date = new DateTime(dbmessage.createdAt);
                return date.ToString("g");
            }

            return null;
        }

        public override string TextSectionFooter(NSIndexPath indexPath)
        {
            RCMessage rcmessage = Rcmessage(indexPath);
            if (rcmessage.Outgoing)
            {
                DBMessage dbmessage = MyDBMessage(indexPath);
                return (dbmessage.createdAt > lastRead) ? dbmessage.status : "Read";
            }

            return null;
        }

        #endregion Header, Footer methods

        #region  User actions (bubble tap)

        public override void ActionTapBubble(NSIndexPath indexPath)
        {
            DBMessage dbmessage = MyDBMessage(indexPath);
            RCMessage rcmessage = Rcmessage(indexPath);

            if (rcmessage.Type == (int)MessageType.Picture)
            {
                var storyboard = UIStoryboard.FromName("Main", NSBundle.MainBundle).InstantiateViewController("PictureView") as PictureView;
                storyboard.pathImage = rcmessage.Picture_image;
                this.NavigationController.PushViewController(storyboard, true);
            }

            if (rcmessage.Type == (int)MessageType.Video)
            {
                var storyboard = UIStoryboard.FromName("Main", NSBundle.MainBundle).InstantiateViewController("VideoView") as VideoView;
                storyboard.pathVideo = rcmessage.Video_path;
                this.NavigationController.PushViewController(storyboard, true);
            }
        }

        #endregion  User actions (bubble tap)

        void Handle_FinishedPickingMedia(object sender, UIImagePickerMediaPickedEventArgs e)
        {
            bool isImage = false;
            switch (e.Info[UIImagePickerController.MediaType].ToString())
            {
                case "public.image":
                    Console.WriteLine("Image selected");
                    isImage = true;
                    break;
                case "public.video":
                    Console.WriteLine("Video selected");
                    break;
            }

            NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
            if (referenceURL != null)
                Console.WriteLine("Url:" + referenceURL.ToString());

            if (isImage)
            {
                NSUrl mediaURL = e.Info[UIImagePickerController.ImageUrl] as NSUrl;
                if (mediaURL != null)
                {
                    Console.WriteLine(mediaURL.ToString());
                    AppDelegate.dataConversation.SendMessage("picture", null, mediaURL.ToString());
                    TableView.ReloadData();
                }
            }
            else
            {
                NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
                if (mediaURL != null)
                {
                    Console.WriteLine(mediaURL.ToString());
                }
            }
          
            imagePicker.DismissViewControllerAsync(true);
        }

        void Handle_Canceled(object sender, EventArgs e)
        {
            imagePicker.DismissViewControllerAsync(true);
        }

        partial void RCMessageAttach(NSObject sender)
        {
            UIAlertController actionSheetAlert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);

            UIAlertAction alertCamera = UIAlertAction.Create("Camera", UIAlertActionStyle.Default, HandleActionAlertCamera);

            UIAlertAction alertPicture = UIAlertAction.Create("Picture", UIAlertActionStyle.Default, HandleActionAlertPicture);

            UIAlertAction alertVideo = UIAlertAction.Create("Video", UIAlertActionStyle.Default, (action) => {
                AppDelegate.dataConversation.SendMessage("video", null, null);
                TableView.ReloadData();
            });

            UIAlertAction alertStickers = UIAlertAction.Create("Stickers", UIAlertActionStyle.Default, (action) => Console.WriteLine("Button Stickers pressed."));

            UIAlertAction alertLocation = UIAlertAction.Create("Location", UIAlertActionStyle.Default, (action) => {
                AppDelegate.dataConversation.SendMessage("location", null, null);
                TableView.ReloadData();
            });

            alertCamera.SetValueForKey(UIImage.FromBundle("chat_camera"), (NSString)"image");
            alertPicture.SetValueForKey(UIImage.FromBundle("chat_picture"), (NSString)"image");
            alertVideo.SetValueForKey(UIImage.FromBundle("chat_video"), (NSString)"image");
            alertStickers.SetValueForKey(UIImage.FromBundle("chat_sticker"), (NSString)"image");
            alertLocation.SetValueForKey(UIImage.FromBundle("chat_location"), (NSString)"image");

            actionSheetAlert.AddAction(alertCamera);
            actionSheetAlert.AddAction(alertPicture);
            actionSheetAlert.AddAction(alertVideo);
            actionSheetAlert.AddAction(alertStickers);
            actionSheetAlert.AddAction(alertLocation);

            actionSheetAlert.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, (action) => Console.WriteLine("Cancel button pressed.")));

            UIPopoverPresentationController presentationPopover = actionSheetAlert.PopoverPresentationController;
            if (presentationPopover != null)
            {
                presentationPopover.SourceView = this.View;
                presentationPopover.PermittedArrowDirections = UIPopoverArrowDirection.Up;
            }

            this.PresentViewController(actionSheetAlert, true, null);
        }

        void HandleActionAlertCamera(UIAlertAction obj)
        {
            if (UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))
            {
                imagePicker.SourceType = UIImagePickerControllerSourceType.Camera;
                imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.Camera);
                NavigationController.PresentModalViewController(imagePicker, true);
            }
            else
            {
                var alert = UIAlertController.Create("Change profile picture", "My device no support camera!", UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Default, null));
                PresentViewController(alert, true, null);
            }
        }

        void HandleActionAlertPicture(UIAlertAction obj)
        {
            imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;
            imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);

            NavigationController.PresentModalViewController(imagePicker, true);
        }

        partial void RCMessageSend(NSObject sender)
        {
            AppDelegate.dataConversation.SendMessage("text", myTextField.Text, null);
            myTextField.Text = "";
            btnRCMessageSend.Enabled = !myTextField.Text.Equals("");
            TableView.ReloadData();
        }
    }
}
